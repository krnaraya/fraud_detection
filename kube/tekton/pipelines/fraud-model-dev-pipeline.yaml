# WARNING: DO NOT kubectl apply -f this file directly.  It first needs variable substitution like so:
# sed "s/demo-dev/$dev_prj/g" $DEMO_HOME/kube/tekton/pipelines/fraud-model-dev-pipeline.yaml | sed "s/demo-cicd/$cicd_prj/g" | oc apply -f - -n $cicd_prj
# where dev_prj is set to point to your dev project and cicd_prj is set to point to your cicd project
apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: fraud-model-dev-pipeline
spec:
  workspaces:
  - name: local-workspace
  params:
    - name: GIT_REPO
      type: string
      description: The repo to check output
      default: 'http://gogs:3000/gogs/fraud_detection_support.git'
    - name: GIT_REVISION
      type: string
      description: The branch to be built
      default: 'master'
    - name: GIT_MESSAGE
      type: string
      description: The commit message of the triggered build (if any)
      default: "<none>"
    - name: PATH_CONTEXT
      type: string
      description: Where the notebook (and supporting files) is relative to the start of the GIT_REPO
      default: "."
    - name: NOTEBOOK_NAME
      type: string
      description: The name of the notebook that contains the model information
  resources:
  - name: app-image
    type: image
  tasks:
  - name: checkout
    taskRef:
      name: git-clone
    workspaces:
    - name: workvol
      workspace: local-workspace
    params:
    - name: url
      value: $(params.GIT_REPO)
    - name: revision
      value: $(params.GIT_REVISION)
    - name: message
      value: $(params.GIT_MESSAGE)
    # by setting subdirectory parameters to ""
    # checkout will clone to the root of the local-workspace
    # volume, which will allow other tasks to find this directory
    # at their name for the mount point
    - name: subdirectory
      value: "source"
    - name: deleteExisting
      value: "true"
    - name: submodules
      value: "false"
  - name: set-build-version
    taskRef:
      name: set-build-version
    runAfter:
      - checkout
    # retries necessary if we run in parallel with a workspace
    retries: 3
    workspaces:
    - name: workvol
      workspace: local-workspace
  - name: extract-model
    taskRef:
      name: extract-model
    runAfter:
      - checkout
    workspaces:
    - name: workvol
      workspace: local-workspace
    params:
    - name: NOTEBOOK_NAME
      value: $(params.NOTEBOOK_NAME)
    - name: PATH_CONTEXT
      value: "$(tasks.checkout.results.checkout-dir)/notebook"
    - name: EXTRACTION_PATH_CONTEXT
      value: "extraction"
    - name: EXTRACTION_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/demo-cicd/extract-model:latest
    retries: 3
  - name: train-model
    taskRef:
      name: train-model
    runAfter:
      - extract-model
    # retries necessary if we run in parallel with a workspace
    retries: 3
    workspaces:
    - name: workvol
      workspace: local-workspace
    params:
    - name: MODEL_NAME
      value: $(tasks.extract-model.results.train-file-name).py
    - name: PATH_CONTEXT
      value: $(tasks.extract-model.results.extraction-path)
    # NOTE: TRAIN_IMAGE should be the same as the one used for the BUILDER_IMAGE
    - name: TRAIN_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/demo-cicd/seldon-builder
  - name: validate-model
    taskRef:
      name: validate-model
    runAfter:
      - train-model
    workspaces:
    - name: workvol
      workspace: local-workspace
    params:
    - name: TRAIN_REPORT
      value: $(tasks.train-model.results.train-report)
    - name: MODEL_NAME
      value: $(params.NOTEBOOK_NAME)
    - name: PATH_CONTEXT
      value: $(tasks.extract-model.results.extraction-path)
  - name: build-image
    taskRef:
      name: seldon-s2i
    runAfter:
      - validate-model
      - set-build-version
    params:
      - name: MODEL_WRAPPER
        value: $(tasks.extract-model.results.wrapper-class-name)
      - name: PATH_CONTEXT
        value: $(tasks.extract-model.results.extraction-path)
      - name: TLSVERIFY
        value: "false"
      - name: BUILDER_IMAGE_SCRIPTS_DIR
        value: /s2i/bin/
      - name: BUILDER_IMAGE
        # NOTE: This should have been imported already, see create-tekton-cicd.sh, "demo-cicd" will
        # be sed replaced in the demo creation script
 
        value: image-registry.openshift-image-registry.svc:5000/demo-cicd/seldon-builder
      - name: IMAGE_TAG
        value: $(tasks.set-build-version.results.build-number)
    resources:
      outputs:
      - name: image
        resource: app-image
    workspaces:
    - name: workvol
      workspace: local-workspace
  - name: scan-image
    taskRef:
      name: sysdig-image-scan
    runAfter:
      - build-image
    params:
      - name: REPORT_CONTEXT
        value: scan-results
      - name: SYSDIG_SECRET_NAME
        value: sysdig-secret
      - name: IMAGE_TAG
        value: $(tasks.set-build-version.results.build-number)
    resources:
      inputs:
      - name: image
        resource: app-image
    workspaces:
    - name: workvol
      workspace: local-workspace
  - name: deploy-model
    taskRef:
      name: seldon-model-deploy
    runAfter:
      - scan-image
    params:
      - name: MODEL_DEPLOY
        value: "model_deployment.json"
      - name: PATH_CONTEXT
        value: $(tasks.extract-model.results.extraction-path)
      - name: PROJECT
        value: demo-dev
      - name: MODEL_IMAGE
        value: $(tasks.build-image.results.pushed-image-tag)
    workspaces:
    - name: workvol
      workspace: local-workspace
  - name: prompt-stage
    taskRef:
      name: prompt-slack
    runAfter:
      - deploy-model
    params:
    - name: webhook-secret
      value: slack-webhook-secret
    - name: message-payload-configmap
      value: slack-message-payload
    - name: callback-payload
      value: $(tasks.set-build-version.results.build-number)
   