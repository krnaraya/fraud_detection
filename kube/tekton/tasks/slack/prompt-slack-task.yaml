apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: prompt-slack
spec:
  params:
  - name: webhook-secret
    type: string
    description: name of the secret that contains the slack app webhook URL (key is 'url')
  - name: tekton-webhook-callback
    type: string
    description: The URL of a page to be opened when the response button is pressed.  NOTE that the listener callback is associated with the bot that the secret came from
    default: "" 
  - name: build-num
    description: The build number associated with this prompting
    type: string
    default: "unknown"
  # FIXME: The array parameter type is not working as advertised here
  # https://github.com/tektoncd/pipeline/blob/v0.11.3/examples/v1beta1/pipelineruns/output-pipelinerun.yaml
  # - name: callback-payload
  #   type: array
  #   description: The payload to be delivered with the callback (e.g. image_tag to deploy) specified as a list of keys followed by values
  - name: callback-payload
    type: string
    description: The payload to be delivered with the callback (e.g. image_tag to deploy) specified as a list of keys followed by values
  - name: message-payload-configmap
    type: string
    description: configmap name of the message JSON to send to Slack.  Should be a file called message-payload.json
  steps:
  - name: prepare-message
    image: quay.io/openshift/origin-cli:latest
    script: |
      #!/usr/bin/env bash

      TRIGGER_URL=$(oc get route webhook-slack -o jsonpath='{.spec.host}')
      echo "Trigger URL is at ${TRIGGER_URL}.  This is what your Interactivity Request URL should be set to in your slackbot"
      
      DOMAIN=$(echo ${TRIGGER_URL} | sed "s/^[^\.][^\.]*\.\(.*\)$/\1/g")
      echo "Domain is $DOMAIN"

      # Use this for testing with TaskRun
      #CURRENT_PIPELINE=$(oc get po/${HOSTNAME} -o jsonpath="{.metadata.labels['tekton\.dev/taskRun']}")
      CURRENT_PIPELINE=$(oc get po/${HOSTNAME} -o jsonpath="{.metadata.labels['tekton\.dev/pipelineRun']}")
      CURRENT_PROJECT=$(oc get po/${HOSTNAME} -o jsonpath='{.metadata.namespace}')
      echo "Current pipeline is ${CURRENT_PIPELINE} and current project is $CURRENT_PROJECT"

      BUILD_NUM=$(inputs.params.build-num)
      BUILD_LOGS_URL_BASE="https://console-openshift-console.${DOMAIN}/k8s/ns/${CURRENT_PROJECT}/tekton.dev~v1beta1~PipelineRun"
      BUILD_LOGS_URL="$BUILD_LOGS_URL_BASE/${CURRENT_PIPELINE}/"
      echo "Build logs url: ${BUILD_LOGS_URL}"

      # Set the callback if passed in.  If blank, then set to the top of
      # the openshift pipeline run page for this project
      CALLBACK_URL=$(inputs.params.tekton-webhook-callback)
      if [[ -z "$CALLBACK_URL" ]]; then
        CALLBACK_URL="$BUILD_LOGS_URL_BASE/"
      fi

      echo "inputs are: '$(inputs.params.callback-payload)'"

      # create the callback payload
      PAYLOAD_FILE=/tmp/payload.json
      cat <<EOF > ${PAYLOAD_FILE}
      {
      EOF
      
      i=0
      for ARG in BUILD_NUM ${BUILD_NUM} $(inputs.params.callback-payload); do
        if [ $((i%2)) -eq 0 ]; then
          if [[ ${i} -ne 0 ]]; then
            echo "," >> ${PAYLOAD_FILE}
          fi
          # name
          echo -n "  \"${ARG}\": " >> ${PAYLOAD_FILE}
        else
          # value
          echo -n "\"${ARG}\"" >> ${PAYLOAD_FILE}
        fi
        i=$((i+1))
      done
      echo "" >> ${PAYLOAD_FILE}
      echo "}" >> ${PAYLOAD_FILE}

      echo "Payload will be:"
      cat ${PAYLOAD_FILE}

      cat /var/config/message-payload.json | sed "s#\${CALLBACK_PAYLOAD}#$(base64 -w 0 ${PAYLOAD_FILE})#g" | sed "s#\${CALLBACK_URL}#${CALLBACK_URL}#g" | sed "s#\${BUILD_LOGS_URL}#${BUILD_LOGS_URL}#g" | sed "s#\${BUILD_NUM}#${BUILD_NUM}#g" > /var/payload/message-payload.json
      echo "Payload is now:"
      cat /var/payload/message-payload.json
    volumeMounts:
      - name: process-payload
        mountPath: /var/payload
      - name: json-payload
        mountPath: /var/config
  - name: post
    image: curlimages/curl:7.68.0
    script: |
      #!/bin/sh
      echo "Triggering webhook at $URL"
      /usr/bin/curl -X POST -H 'Content-type: application/json' --data @/var/payload/message-payload.json $URL
    env:
    - name: URL
      valueFrom:
        secretKeyRef:
          name: $(inputs.params.webhook-secret)
          key: url
    volumeMounts:
      - name: process-payload
        mountPath: /var/payload
  volumes:
    - name: json-payload
      configMap:
        name: $(inputs.params.message-payload-configmap)
    - name: process-payload
      emptyDir: {}