# This is based on this s2i builder from the Tekton catalog here (https://github.com/tektoncd/catalog/blob/v1beta1/s2i/s2i.yaml) but is
# adapted to take in an image tag and report the whole image with tag that was pushed to the image registry
---
    apiVersion: tekton.dev/v1beta1
    kind: Task
    metadata:
      name: workspace-s2i
    spec:
      workspaces:
      - name: source
        description: Persistent volume where everything is getting compiled
        mountPath: /workspace/source
        readOnly: true
      params:
      - name: PATH_CONTEXT
        description: The location of the path to run s2i from.  Set this to target to do a binary build.
        default: .
        type: string
      - name: TLSVERIFY
        description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
        default: "true"
        type: string
      - name: BUILDER_IMAGE
        description: The location of the s2i builder image.
        type: string
      - name: BUILDER_IMAGE_SCRIPTS_DIR
        type: string
        description: The directory where the s2i scripts can be found in the s2i builder image
        default: '/usr/libexec/s2i/'
      - name: LOGLEVEL
        description: Log level when running the S2I binary
        default: '0'
      - name: IMAGE_TAG
        description: The tag to put on the resulting image
        default: "latest"
        type: string
      results:
        - name: pushed-image-tag
          description: the full name of the image (including tag) that was pushed in this task
      resources:
        outputs:
          - name: image
            type: image
      steps:
        - name: generate
          image: quay.io/openshift-pipeline/s2i:latest
          workingDir: $(workspaces.source.path)
          command:
            - /usr/local/bin/s2i
            - build
            - $(params.PATH_CONTEXT)
            - $(params.BUILDER_IMAGE)
            - --as-dockerfile
            - /gen-source/Dockerfile.gen
            - --loglevel=$(params.LOGLEVEL)
            # s2i does not appear to respect the annotations on the location of the S2I 
            # paths on the image
            #  "io.openshift.s2i.scripts-url": "image:///s2i/bin"
            - --image-scripts-url
            - image://$(params.BUILDER_IMAGE_SCRIPTS_DIR)/
            # The seldon-core image need to run as root
            # FIXME: this task should either be more specific to seldon, or this should be genericised
            - --assemble-user
            - root
            # NOTE: by default will use the environment file in the .s2i sub-directory of the PATH_CONTEXT
          volumeMounts:
            - name: gen-source
              mountPath: /gen-source
        - name: build
          image: quay.io/buildah/stable
          workingDir: /gen-source
          command: ['buildah', 'bud', '--tls-verify=$(inputs.params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(outputs.resources.image.url):$(inputs.params.IMAGE_TAG)', '.']
          volumeMounts:
            - name: varlibcontainers
              mountPath: /var/lib/containers
            - name: gen-source
              mountPath: /gen-source
          securityContext:
            privileged: true
        - name: push
          image: quay.io/buildah/stable
          command: ['buildah', 'push', '--tls-verify=$(inputs.params.TLSVERIFY)', '$(outputs.resources.image.url):$(inputs.params.IMAGE_TAG)', 'docker://$(outputs.resources.image.url):$(inputs.params.IMAGE_TAG)']
          volumeMounts:
            - name: varlibcontainers
              mountPath: /var/lib/containers
          securityContext:
            privileged: true
        - name: results
          image: registry.access.redhat.com/ubi8/ubi-minimal:latest
          script: |
            #!/usr/bin/env bash
            PUSHED_IMAGE_TAG="$(outputs.resources.image.url):$(inputs.params.IMAGE_TAG)"
            echo "Pushed image tagged as: ${PUSHED_IMAGE_TAG}."
      
            echo "${PUSHED_IMAGE_TAG}" | tr -d "\n" | tee $(results.pushed-image-tag.path)
      volumes:
        - name: varlibcontainers
          emptyDir: {}
        - name: gen-source
          emptyDir: {}